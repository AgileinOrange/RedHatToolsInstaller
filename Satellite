#!/bin/bash
#SATELLITE SETTUP APPENDIX
#The Hammer tool commands changed a bit in 6.2.10 So I used most of the examples below to set my Satellite up based on variables from the Variables Appendix spreadsheet. I have added these in an effort to save #you time and key strokes should you decide to set up a production environment.
#
#I have left these snip-its in text for ease of use they are more or less in the order that they need to be run, However all code should be run on a Dev/TEST environment prior to being used on production as IDs/#NAMES and other dynamic variables may differ from this system to yours.
#
#"admin" user should be set up on system should have sudo access.
#
#2 interfaces:
#       ETH0 INTERNAL only DHCP, DNS, and ,TFTP For Provisioning 10.168.0.0
#	IP Addr        10.168.100.235
#	Mask           255.255.0.0
#       Default Route  192.168.100.1
#       DNS                   

#       ETH1 EXTERNAL
#	IP Addr        192.168.100.235
#      	Mask           255.255.255.0
#       Default Route  192.168.100.1
#       DNS            10.168.100.235 192.168.100.1

#       DHCP START     10.168.100.128
#       DHCP END       10.168.100.254
#

#------------------------------
function BAKBASHRC {
#------------------------------
  cp -p /root/.bashrc /root/.bashrc.bak
}

#------------------------------
function FIREWALLD {
#------------------------------
systemctl start firewalld.service
systemctl enable firewalld.service
echo "16509/tcp"
firewall-cmd --permanent --add-port="16509/tcp"
echo "16514/tcp"
firewall-cmd --permanent --add-port=16514/tcp
echo "22/tc"
firewall-cmd --permanent --add-port=22/tcp
echo "27017/tcp"
firewall-cmd --permanent --add-port=27017/tcp
echo "389/tcp"
firewall-cmd --permanent --add-port=389/tcp
echo "443/tcp"
firewall-cmd --permanent --add-port=443/tcp
echo "5000/tcp"
firewall-cmd --permanent --add-port=5000/tcp
echo "53/tcp"
firewall-cmd --permanent --add-port=53/tcp
echo "53/udp"
firewall-cmd --permanent --add-port=53/udp
echo "5646/tcp"
firewall-cmd --permanent --add-port=5646/tcp
echo "=5647/tcp"
firewall-cmd --permanent --add-port=5647/tcp
echo "5671/tcp"
firewall-cmd --permanent --add-port=5671/tcp
echo "5672/tcp"
firewall-cmd --permanent --add-port=5672/tcp
echo "5900/tcp"
firewall-cmd --permanent --add-port=5900/tcp
echo "5910-5930/tcp"
firewall-cmd --permanent --add-port=5910-5930/tcp
echo "5930/tcp"
firewall-cmd --permanent --add-port=5930/tcp
echo "636/tcp"
firewall-cmd --permanent --add-port=636/tcp
echo "67/udp"
firewall-cmd --permanent --add-port=67/udp
echo "68/udp"
firewall-cmd --permanent --add-port=68/udp
echo "69/udp"
firewall-cmd --permanent --add-port=69/udp
echo "7911/tcp"
firewall-cmd --permanent --add-port=7911/tcp
echo "80/tcp"
firewall-cmd --permanent --add-port=80/tcp
echo "8000/tcp"
firewall-cmd --permanent --add-port=8000/tcp
echo "8080/tcp"
firewall-cmd --permanent --add-port=8080/tcp
echo "8140/tcp"
firewall-cmd --permanent --add-port=8140/tcp
echo "8443/tcp"
firewall-cmd --permanent --add-port=8443/tcp
echo "9090/tcp"
firewall-cmd --permanent --add-port=9090/tcp

echo "Firewall services for tftp, RH-Satellite-6, https, http, dns, and dhcp"
firewall-cmd --permanent --add-service=tftp
firewall-cmd --permanent --add-service=RH-Satellite-6
firewall-cmd --permanent --add-service=https
firewall-cmd --permanent --add-service=http
firewall-cmd --permanent --add-service=dns
firewall-cmd --permanent --add-service=dhcp
firewall-cmd --permanent --zone=public --add-service=nfs
firewall-cmd --permanent --zone=public --add-service=mountd
firewall-cmd --permanent --zone=public --add-service=rpc-bind
firewall-cmd --reload
sleep 2
echo "Restarting firewall"
systemctl restart firewalld.service


#------------------------------
function REGSSAT {
#------------------------------
  
  echo "*********************************************************"
  echo "Add Satellite subscription"
  echo "*********************************************************"
  subscription-manager unregister
  sleep 5
  subscription-manager clean
  sleep 5
  subscription-manager register
  
  subscription-manager attach --pool=`subscription-manager list --available --matches 'Red Hat Satellite' --pool-only`
}

#Once the sat is refistered you need to configure the repositories
#------------------------------
function REPOS {
#------------------------------
  echo "*********************************************************"
  echo "Set repos for installing and updating Satellite 6.2"
  echo "*********************************************************"
  subscription-manager repos --disable '*'
  subscription-manager repos --enable=rhel-7-server-rpms
  subscription-manager repos --enable=rhel-server-rhscl-7-rpms
  subscription-manager repos --enable=rhel-7-server-satellite-6.3-rpms
  yum clean all 
  rm -rf /var/cache/yum
  
}

#------------------------------
function UPGRADE {
#------------------------------
yum upgrade -y 

}

#----------------------------------
function GENERALSETUP {
#----------------------------------
  
  echo "*********************************************************"
  echo "Generate system keys for root and foreman"
  echo "*********************************************************"
  
  mkdir -p /usr/share/foreman/.ssh
  ssh-keygen -f /usr/share/foreman/.ssh/id_rsa -t rsa -N ''
  ssh-keyscan -t ecdsa $(hostname) >/usr/share/foreman/.ssh/known_hosts
  chown -R foreman:foreman /usr/share/foreman/.ssh
  ssh-keygen -f /root/.ssh/id_rsa -t rsa -N ""
  echo 'inet.ipv4.ip_forward=1' >> /etc/sysctl.conf
  echo 'kernel.domainname=test.spg' >> /etc/sysctl.conf
  
  echo "*********************************************************"
  echo "Set selinux to permissive for the install and config of Satellite"
  echo "*********************************************************"
  sed -i 's/SELINUX=enforcing/SELINUX=permissive/g' /etc/selinux/config
  setenforce 0
  
  echo "*********************************************************"
  echo "Setting admin user to no password for sudo"
  echo "*********************************************************"
  echo 'admin ALL = NOPASSWD: ALL' >> /etc/sudoers
  
  echo "*********************************************************"
  echo "Add required Directories"
  echo "*********************************************************"
  mkdir -p /root/Downloads
  mkdir -p /root/.hammer
}

# I have echoed the following into my /root/.bashrc to setup I recommend backing up your /root/.bashrc and once you have completed the install replace with your backup for security purposes
# Variables used in these scripts

#ADMIN_PASSWORD=redhat
#ADMIN=admin
#DHCPDNS=10.168.205.235
#DHCPEND=10.168.200.250
#DHCPGW=10.168.205.235
#DHCPSTART=10.168.100.100
#DNSFWD=10.168.205.235
#DNSNET=10.168.0.0
#DNSRVS=100.168.10.in-addr.arpa
#DNSZONE=sat6.test.spg
#DOM=test.spg
#EXTERNAL=eth1
#EXTERNALIP=192.168.100.235
#HNAME=sat6.test.spg
#HOST_PASSWORD=rreeddhhaatt
#INTERNAL=eth0
#INTERNALIP=10.168.205.235
#OSID=1
#PARTID=61
#REALM=test.spg
#SATELLITE=sat6.test.spg
#ETH0NETWORK=10.168.0.0
#ETH0SUBMASK=255.255.0.0
#ETH0GATEWAY=10.168.100.1
#INTERNALSUBMASK=255.255.0.0
#ORG=REDHAT
#LOC=DENVER
#SUBDNS=10.168.205.235
#SUBGATEWAY=10.168.205.235
#SUBNAME=10.168.0.0_16
#SUBNETWORK=10.168.0.0
#MEDID1=9
#PROXYNAME=sat6.test.spg
#PROXYID=1
#PARTID=61
#PXEID=27
#SATID=73
#ORGID=1
#LOCID=2
#ARCH=x86_64
#PROXYID=1

#----------------------------------
function VARSETUP1 {
#----------------------------------
  export INTERNAL=$(ip -o link | head -n 2 | tail -n 1 | awk '{print $2;}' | sed s/:$//)
  export EXTERNAL=$(ip route show | sed -e 's/^default via [0-9.]* dev \(\w\+\).*/\1/' | head -1)
  export ETH0SUBMASK=$(ifconfig $INTERNAL |grep netmask |awk -F " " {'print $4'})
  export ETH0GATEWAY=$(ifconfig $INTERNAL | grep "inet" | awk -F ' ' '{print $2}' |grep -v f |awk -F . '{print $1"."$2"."0"."1}')
  export ETH0NETWORK=$(ifconfig $INTERNAL | grep "inet" | awk -F ' ' '{print $2}' |grep -v f |awk -F . '{print $1"."$2"."0"."0}')
  
  echo "ADMIN=admin" >> /root/.bashrc
  echo "ADMIN_PASSWORD=redhat" >> /root/.bashrc
  echo "DHCPDNS=$(ifconfig $INTERNAL | grep "inet" | awk -F ' ' '{print $2}' |grep -v f |awk -F . '{print $1"."$2"."$3"."$4}')" >> /root/.bashrc
  echo "DHCPEND=$(ifconfig $INTERNAL | grep "inet" | awk -F ' ' '{print $2}' |grep -v f |awk -F . '{print $1"."$2"."100"."254}')" >> /root/.bashrc
  echo "DHCPGW=$(ifconfig $INTERNAL | grep "inet" | awk -F ' ' '{print $2}' |grep -v f |awk -F . '{print $1"."$2"."$3"."1}')" >> /root/.bashrc
  echo "DHCPSTART=$(ifconfig $INTERNAL | grep "inet" | awk -F ' ' '{print $2}' |grep -v f |awk -F . '{print $1"."$2"."100"."128}')" >> /root/.bashrc
  echo "DNSFWD=$(ifconfig $INTERNAL | grep "inet" | awk -F ' ' '{print $2}' |grep -v f |awk -F . '{print $1"."$2"."0"."1}')" >> /root/.bashrc
  echo "DNSNET=$(ifconfig $INTERNAL | grep "inet" | awk -F ' ' '{print $2}' |grep -v f |awk -F . '{print $1"."$2"."0"."0}')" >> /root/.bashrc
  echo "DNSRVS=$(ifconfig $INTERNAL | grep "inet" | awk -F ' ' '{print $2}' |grep -v f |awk -F . '{print $3"."$2"."$1".""in-addr.arpa"}')" >> /root/.bashrc
  echo "DNSZONE=$(domainname -d)" >> /root/.bashrc
  echo "DNSZONE=$(hostname)" >> /root/.bashrc
  echo "DOM=$(hostname -d)" >> /root/.bashrc
  echo "EXTERNALIP=$(ifconfig $EXTERNAL |grep -v inet6 |grep inet |awk {'print $2'})" >> /root/.bashrc
  echo "EXTERNAL=$(ip route show | sed -e 's/^default via [0-9.]* dev \(\w\+\).*/\1/' | head -1)" >> /root/.bashrc
  echo "HNAME=$(hostname)" >> /root/.bashrc
  echo "INTERNALIP=$(ifconfig $INTERNAL |grep inet |grep -v inet6 |awk -F " " {'print $2'})" >> /root/.bashrc
  echo "INTERNAL=$(ip -o link | head -n 2 | tail -n 1 | awk '{print $2;}' | sed s/:$//)" >> /root/.bashrc
  echo "INTERNALSUBMASK=$(ifconfig $INTERNAL |grep netmask |awk -F ' ' {'print $4'})" >> /root/.bashrc
  echo "REALM=$(hostname -d)" >> /root/.bashrc
  echo "SATELLITE=$(hostname)" >> /root/.bashrc
  source /root/.bashrc
  ifdown eth1
  echo "SUBDNS=$(ifconfig $INTERNAL |grep inet |grep -v inet6 |awk -F " " {'print $2'})" >> /root/.bashrc
# echo "SUBDNS=$(nmcli dev show |grep DNS |awk -F ':' {'print $2'} | sed "s/ //g")" >> /root/.bashrc
  echo "SUBGATEWAY=$(ip route | grep default | awk -F ' ' {'print $3'}) " >> /root/.bashrc
  source /root/.bashrc
  echo "SUBNAME=$INTERNALIP" >> /root/.bashrc
  echo "SUBNETWORK=$(ifconfig $INTERNAL | grep "inet" | awk -F ' ' '{print $2}' |grep -v f |awk -F . '{print $1"."$2"."0"."0}')"  >> /root/.bashrc
  #echo "ORG=$(hostname -s)" >> /root/.bashrc
  echo 'What is the company or customer name, spaces should be _ (eg.. Custy_Customer)'
  read COMPANY
  echo "COMPANY=$COMPANY" >> /root/.bashrc
  echo 'What is the location of the Satellite? (eg.. DENVER)'
  read SATLOCATION
  echo "LOCATION=$SATLOCATION" >> /root/.bashrc
  source /root/.bashrc
  echo "ORG=$COMPANY"  >> /root/.bashrc
  echo "HOST_PREFIX=$COMPANY" >> /root/.bashrc
  echo "HOST_PASSWORD=redhat" >> /root/.bashrc
  ifup eth1
}

#REBOOTHERE

#BASIC P.O.C Satelite Setup my system example:

#satellite-installer -v --scenario satellite \
#--foreman-proxy-dhcp true \						# Do you want Satellite to provide DHCP
#--foreman-proxy-dhcp-gateway 10.168.205.235 \ 	            		# sets the dhcp gateway
#--foreman-proxy-dhcp-interface eth0 \        				# sets the dhcp interface
#--foreman-proxy-dhcp-nameservers 10.168.205.235 \  			# sets the dhcp nameservers
#--foreman-proxy-dhcp-range  "10.168.100.20 10.168.240.110"  \ 		# sets the dhcp range
#--foreman-proxy-dhcp-server 10.168.205.235 \				# sets dhcp server (typically satellite server)
#--foreman-proxy-dns true \						# Do you want Satellite to provide DNS
#--foreman-proxy-dns-forwarders 10.168.205.235 \			  	# configures the DNS forwarders
#--foreman-proxy-dns-interface eth0  \        				# sets the DNS interface
#--foreman-proxy-dns-reverese  100.168.10.in-addr.arpa  \  		# creates reverse DNS zone
#--foreman-proxy-dns-server 10.168.205.235  \    			# Sets DNS server (typically satellite server)
#--foreman-proxy-dns-zone sat6.test.spg \    				# creates the DNS zone
#--foreman-proxy-tftp true  \                                    	# Used to enable downloading of kickstarts to clients
#--foreman-proxy-tftp-servername sat6.test.spg \   			# Used to enable downloading of kickstarts to the clients
#--foreman-initial-organization  REDHAT  \    				# This line is optional but sets this name as default
#--foreman-initial-location  DENVER  \     				# This line is optional but sets this name as default
#--foreman-admin-password rreeddhhaatt   \    				# Change the password to what you want

#------------------------------
function INSTALLNSATCONFIGURE {
#------------------------------
  #INSTALL SATELLITE
  yum -q list installed satellite &>/dev/null && echo "satellite is installed" || yum groupinstall -y 'Red Hat Satellite' --skip-broken
  
  #CONFIGURE SATELLITE
#  satellite-installer -v --scenario satellite \
#  --foreman-proxy-dhcp true \
#  --foreman-proxy-dhcp-gateway=10.168.205.235 \
#  --foreman-proxy-dhcp-interface=eth0 \
#  --foreman-proxy-dhcp-nameservers 10.168.205.235 \
#  --foreman-proxy-dhcp-range="10.168.100.128 10.168.100.254" \
#  --foreman-proxy-dhcp-server 10.168.205.235 \
#  --foreman-proxy-dns true \
#  --foreman-proxy-dns-forwarders=10.168.205.235 \
#  --foreman-proxy-dns-interface=eth0 \
#  --foreman-proxy-dns-reverse=100.168.10.in-addr.arpa \
#  --foreman-proxy-dns-server=10.168.0.1 \
#  --foreman-proxy-dns-zone=test.spg \
#  --foreman-proxy-tftp true \
#  --foreman-proxy-tftp-servername=sat6.test.spg \
#  --foreman-initial-organization=REDHAT \
#  --foreman-initial-location=DENVER \
#  --foreman-admin-password=redhat 

satellite-installer -v --scenario satellite   --foreman-proxy-dhcp true   --foreman-proxy-dhcp-gateway=10.168.100.235   --foreman-proxy-dhcp-interface=eth0   --foreman-proxy-dhcp-nameservers 10.168.100.235   --foreman-proxy-dhcp-range="10.168.100.128 10.168.100.254"   --foreman-proxy-dhcp-server 10.168.100.235   --foreman-proxy-dns true   --foreman-proxy-dns-forwarders=10.168.0.1   --foreman-proxy-dns-interface=eth0   --foreman-proxy-dns-reverse=100.168.10.in-addr.arpa   --foreman-proxy-dns-server=10.168.100.235   --foreman-proxy-dns-zone=test.spg   --foreman-proxy-tftp true   --foreman-proxy-tftp-servername=sat6.test.spg   --foreman-initial-organization=REDHAT   --foreman-initial-location=DENVER   --foreman-admin-password=redhat  --foreman-proxy-plugin-discovery-install-images=true


}

#------------------------------
#function INSTALLDISCOVERYIMAGE {
##------------------------------
#  yum -q list installed foreman-discovery-image &>/dev/null && echo "foreman-discovery-image installed" || yum install -y foreman-discovery-image --skip-broken

#}

#After basic configure completes the following steps need to be done to complete the build

# Setting up hammer
# The Hammer setup file contains clear text password and while the file is limited to root some customers choose to retype the file when it is needed as it is only a few lines

#------------------------------
function HAMMERCONF {
#------------------------------
  echo -ne "\e[8;40;170t"
  source /root/.bashrc
  clear
  echo "***********************************************************************************************************"
  echo "Enabling Hammer for Satellite configuration tasks"
  echo "
	Setting up hammer will list the Satellite username and password in the /root/.hammer/cli_config.yml file
	with default permissions set to -rw-r--r--, if this is a security concern it is reccomended the file is
        deleted once the setup is complete"
  echo " "
  echo "***********************************************************************************************************"
  sleep 10
cat > /root/.hammer/cli_config.yml<< EOF
:foreman:
 :host: 'https://$(hostname)'
 :username: 'admin'
 :password: 'redhat'
:log_dir: '/var/log/foreman'
:log_level: 'error'
EOF
  
  sed -i 's/example/redhat/g' /etc/hammer/cli.modules.d/foreman.yml
  sed -i 's/#:password/:password/g' /etc/hammer/cli.modules.d/foreman.yml
}

#Import the manifest
#PATH OF YOUR MANIFEST MAY BE DIFFERENT THAN MINE SO PLEASE REVIEW AND CHANGE TO MATCH YOUR ENV

#-------------------------------
function CREATEOWNREPOS {
#-------------------------------
  hammer subscription upload --organization $ORG --file /home/admin/Downloads/manifest_*.zip
}

#-------------------------------
function CREATEOWNREPOS {
#-------------------------------
  echo -ne "\e[8;40;170t"
  source /root/.bashrc
  echo " "
  echo "*******************************************************************************************************"
  echo "
  Syncing repos this can take hours or days depending what all has been added So kick your feet up, and/or have some coffee and cheack back
  Please goto your system with a browser and connect to https://"$EXTERNALIP"/katello/sync_management to view progress"
  echo " "
  echo "*******************************************************************************************************"
  
  #echo " "
  #echo "*********************************************************"
  #echo "Red Hat Enterprise Linux 6 Server (Kickstart):"
  #echo "*********************************************************"
  
  #hammer repository-set enable --organization $ORG --product 'Red Hat Enterprise Linux Server' --basearch='x86_64' --releasever='6.8' --name 'Red Hat Enterprise Linux 6 Server (Kickstart)'
  #time hammer repository synchronize --organization $ORG --product 'Red Hat Enterprise Linux Server' --name 'Red Hat Enterprise Linux 6 Server Kickstart x86_64 6.8' 2>/dev/null
  
  #echo " "
  #echo "*********************************************************"
  #echo "Red Hat Enterprise Linux 6 Server (RPMs):"
  #echo "*********************************************************"
  
  #hammer repository-set enable --organization $ORG --product 'Red Hat Enterprise Linux Server' --basearch='x86_64' --releasever='6Server' --name 'Red Hat Enterprise Linux 6 Server (RPMs)'
  #time hammer repository synchronize --organization $ORG --product 'Red Hat Enterprise Linux Server' --name 'Red Hat Enterprise Linux 6 Server RPMs x86_64 6Server' 2>/dev/null
  
  #echo " "
  #echo "*********************************************************"
  #echo "Red Hat Satellite Tools 6.2 (for RHEL 6 Server) (RPMs):"
  #echo "*********************************************************"
  
  #hammer repository-set enable --organization $ORG --product 'Red Hat Enterprise Linux Server' --basearch='x86_64' --name 'Red Hat Satellite Tools 6.2 (for RHEL 6 Server) (RPMs)'
  #time hammer repository synchronize --organization $ORG --product 'Red Hat Enterprise Linux Server' --name 'Red Hat Satellite Tools 6.2 for RHEL 6 Server RPMs x86_64' 2>/dev/null
  
  #echo " "
  #echo "*********************************************************"
  #echo "Red Hat Software Collections RPMs for Red Hat Enterprise Linux 6 Server:"
  #echo "*********************************************************"
  
  #hammer repository-set enable --organization $ORG --product 'Red Hat Software Collections for RHEL Server' --basearch='x86_64' --releasever='6Server' --name 'Red Hat Software Collections RPMs for Red Hat Enterprise Linux 6 Server'
  #time hammer repository synchronize --organization $ORG --product 'Red Hat Software Collections for RHEL Server' --name 'Red Hat Software Collections RPMs for Red Hat Enterprise Linux 6 Server x86_64 6Server' 2>/dev/null
  
  #echo " "
  #echo "*********************************************************"
  #echo "Red Hat Enterprise Linux 6 Server - Extras (RPMs):"
  #echo "*********************************************************"
  
  #hammer repository-set enable --organization $ORG --product 'Red Hat Enterprise Linux Server' --basearch='x86_64' --name 'Red Hat Enterprise Linux 6 Server - Extras (RPMs)'
  #time hammer repository synchronize --organization $ORG --product 'Red Hat Enterprise Linux Server' --name 'Red Hat Enterprise Linux 6 Server - Extras RPMs x86_64 6Server' 2>/dev/null
  
  #echo " "
  #echo "*********************************************************"
  #echo "Red Hat Enterprise Linux 6 Server - Optional (RPMs):"
  #echo "*********************************************************"
  
  #hammer repository-set enable --organization $ORG --product 'Red Hat Enterprise Linux Server' --basearch='x86_64' --releasever='6Server' --name 'Red Hat Enterprise Linux 6 Server - Optional (RPMs)'
  #time hammer repository synchronize --organization $ORG --product 'Red Hat Enterprise Linux Server' --name 'Red Hat Enterprise Linux 6 Server - Optional RPMs x86_64 6Server' 2>/dev/null
  
  #echo " "
  #echo "*********************************************************"
  #echo "Red Hat Enterprise Linux 6 Server - Supplementary (RPMs):"
  #echo "*********************************************************"
  
  #hammer repository-set enable --organization $ORG --product 'Red Hat Enterprise Linux Server' --basearch='x86_64' --releasever='6Server' --name 'Red Hat Enterprise Linux 6 Server - Supplementary (RPMs)'
  #time hammer repository synchronize --organization $ORG --product 'Red Hat Enterprise Linux Server' --name 'Red Hat Enterprise Linux 6 Server - Supplementary RPMs x86_64 6Server' 2>/dev/null
  
  #echo " "
  #echo "*********************************************************"
  #echo "Red Hat Enterprise Linux 6 Server - RH Common (RPMs):"
  #echo "*********************************************************"
  
  #hammer repository-set enable --organization $ORG --product 'Red Hat Enterprise Linux Server' --basearch='x86_64' --releasever='6Server' --name 'Red Hat Enterprise Linux 6 Server - RH Common (RPMs)'
  #time hammer repository synchronize --organization $ORG --product 'Red Hat Enterprise Linux Server' --name 'Red Hat Enterprise Linux 6 Server - RH Common RPMs x86_64 6Server' 2>/dev/null
  
  #echo " "
  #echo "*********************************************************"
  #echo "EPEL 6 packages:"
  #echo "*********************************************************"
  #wget -q https://dl.fedoraproject.org/pub/epel/RPM-GPG-KEY-EPEL-6 -O /root/RPM-GPG-KEY-EPEL-6
  #hammer gpg create --key /root/RPM-GPG-KEY-EPEL-6 --name 'GPG-EPEL-6' --organization $ORG
  #hammer product create --name='Extra Packages for Enterprise Linux 6' --organization $ORG
  #hammer repository create --name='Extra Packages for Enterprise Linux 6' --organization $ORG --product='Extra Packages for Enterprise Linux 6' --content-type=yum --publish-via-http=true --url=http://dl.fedoraproject.org/pub/epel/6/x86_64/ --checksum-type=sha256 --gpg-key=GPG-EPEL-6
  #time hammer repository synchronize --organization $ORG --product 'Extra Packages for   ssh-keygen -f /root/.ssh/id_rsa -t rsa -N ""Enterprise Linux 6' --name 'Extra Packages for Enterprise Linux 6' 2>/dev/null
  
  echo " "
  echo "*********************************************************"
  echo "Red Hat Enterprise Linux 7 Server (Kickstart):"
  echo "*********************************************************"
  hammer repository-set enable --organization $ORG --product 'Red Hat Enterprise Linux Server' --basearch='x86_64' --releasever='7.5' --name 'Red Hat Enterprise Linux 7 Server (Kickstart)'
  hammer repository update --organization $ORG --product 'Red Hat Enterprise Linux Server' --name 'Red Hat Enterprise Linux 7 Server Kickstart x86_64 7.5' 
#  time hammer repository synchronize --organization $ORG --product 'Red Hat Enterprise Linux Server' --name 'Red Hat Enterprise Linux 7 Server Kickstart x86_64 7.5' 2>/dev/null
  sleep 10
  
  echo " "
  echo "*********************************************************"
  echo "Red Hat Enterprise Linux 7 Server (RPMs):"
  echo "*********************************************************"
  hammer repository-set enable --organization $ORG --product 'Red Hat Enterprise Linux Server' --basearch='x86_64' --releasever='7Server' --name 'Red Hat Enterprise Linux 7 Server (RPMs)' 
 # time hammer repository synchronize --organization $ORG --product 'Red Hat Enterprise Linux Server' --name 'Red Hat Enterprise Linux 7 Server RPMs x86_64 7Server' 2>/dev/null
  sleep 10
  
  echo " "
  echo "*********************************************************"
  echo "Red Hat Satellite Tools 6.2 (for RHEL 7 Server) (RPMs):"
  echo "*********************************************************"
  hammer repository-set enable --organization $ORG --product 'Red Hat Enterprise Linux Server' --basearch='x86_64' --name 'Red Hat Satellite Tools 6.2 (for RHEL 7 Server) (RPMs)'
  #time hammer repository synchronize --organization $ORG --product 'Red Hat Enterprise Linux Server' --name 'Red Hat Satellite Tools 6.2 for RHEL 7 Server RPMs x86_64'
  sleep 10
  
  echo " "
  echo "*********************************************************"
  echo "Red Hat Software Collections RPMs for Red Hat Enterprise Linux 7 Server:"
  echo "*********************************************************"
  hammer repository-set enable --organization $ORG --product 'Red Hat Software Collections for RHEL Server' --basearch='x86_64' --releasever='7Server' --name 'Red Hat Software Collections RPMs for Red Hat Enterprise Linux 7 Server'  
  #time hammer repository synchronize --organization $ORG --product 'Red Hat Software Collections for RHEL Server' --name 'Red Hat Software Collections RPMs for Red Hat Enterprise Linux 7 Server x86_64 7Server' 2>/dev/null
  sleep 10
  
  echo " "
  echo "*********************************************************"
  echo "Red Hat Enterprise Linux 7 Server - Extras (RPMs):"
  echo "*********************************************************"
  hammer repository-set enable --organization $ORG --product 'Red Hat Enterprise Linux Server' --basearch='x86_64' --name 'Red Hat Enterprise Linux 7 Server - Extras (RPMs)'
  #time hammer repository synchronize --organization $ORG --product 'Red Hat Enterprise Linux Server' --name 'Red Hat Enterprise Linux 7 Server - Extras RPMs x86_64' 2>/dev/null
  sleep 10
  
  echo " "
  echo "*********************************************************"
  echo "Red Hat Enterprise Linux 7 Server - Optional (RPMs):"
  echo "*********************************************************"
  hammer repository-set enable --organization $ORG --product 'Red Hat Enterprise Linux Server' --basearch='x86_64' --releasever='7Server' --name 'Red Hat Enterprise Linux 7 Server - Optional (RPMs)'
  #time hammer repository synchronize --organization $ORG --product 'Red Hat Enterprise Linux Server' --name 'Red Hat Enterprise Linux 7 Server - Optional RPMs x86_64 7Server' 2>/dev/null
  
  echo " "
  echo "*********************************************************"
  echo "Red Hat Enterprise Linux 7 Server - RH Common (RPMs):"
  echo "*********************************************************"
  hammer repository-set enable --organization $ORG --product 'Red Hat Enterprise Linux Server' --basearch='x86_64' --releasever='7Server' --name 'Red Hat Enterprise Linux 7 Server - RH Common (RPMs)'
  #time hammer repository synchronize --organization $ORG --product 'Red Hat Enterprise Linux Server' --name 'Red Hat Enterprise Linux 7 Server - RH Common RPMs x86_64 7Server' 2>/dev/null
  
  echo " "
  echo "*********************************************************"
  echo "Red Hat Enterprise Linux 7 Server - Supplementary (RPMs):"
  echo "*********************************************************"
  hammer repository-set enable --organization $ORG --product 'Red Hat Enterprise Linux Server' --basearch='x86_64' --releasever='7Server' --name 'Red Hat Enterprise Linux 7 Server - Supplementary (RPMs)'
  #time hammer repository synchronize --organization $ORG --product 'Red Hat Enterprise Linux Server' --name 'Red Hat Enterprise Linux 7 Server - Supplementary RPMs x86_64 7Server' 2>/dev/null
  
  echo " "
  echo "*********************************************************"
  echo "Red Hat Ceph Storage Tools 1.3 for Red Hat Enterprise Linux 7 Server (RPMs):"
  echo "*********************************************************"
  hammer repository-set enable --organization $ORG --product 'Red Hat Enterprise Linux Server' --basearch='x86_64' --releasever='7Server' --name 'Red Hat Ceph Storage Tools 1.3 for Red Hat Enterprise Linux 7 Server (RPMs)'
  #time hammer repository synchronize --organization $ORG --product 'Red Hat Enterprise Linux Server' --name 'Red Hat Ceph Storage Tools 1.3 for Red Hat Enterprise Linux 7 Server RPMs x86_64 7Server' 2>/dev/null
  
  echo " "
  echo "*********************************************************"
  echo "Red Hat Enterprise Linux 7 Server - Oracle Java:"
  echo "*********************************************************"
  echo " "
  hammer repository-set enable --organization $ORG --product 'Oracle Java for RHEL Server' --basearch='x86_64' --releasever='7Server' --name 'Red Hat Enterprise Linux 7 Server - Oracle Java (RPMs)'
  #time hammer repository synchronize --organization $ORG --product 'Oracle Java for RHEL Server' --name 'Red Hat Enterprise Linux 7 Server - Oracle Java (RPMs)' 2>/dev/null
  
  echo " "
  echo "*********************************************************"
  echo "Extra Packages for Enterprise Linux 7 - x86_64:"
  echo "*********************************************************"
  wget -q https://dl.fedoraproject.org/pub/epel/RPM-GPG-KEY-EPEL-7 -O /root/RPM-GPG-KEY-EPEL-7
  hammer gpg create --key /root/RPM-GPG-KEY-EPEL-7  --name 'GPG-EPEL-7' --organization $ORG
  hammer product create --name='Extra Packages for Enterprise Linux 7' --organization $ORG
  hammer repository create --name='Extra Packages for Enterprise Linux 7' --organization $ORG --product='Extra Packages for Enterprise Linux 7' --content-type yum --publish-via-http=true --url=http://dl.fedoraproject.org/pub/epel/7/x86_64/  
  #time hammer repository synchronize --organization $ORG --product 'Extra Packages for Enterprise Linux 7'  --name  'Extra Packages for Enterprise Linux 7' 2>/dev/null
  
  echo " "
  echo "*********************************************************"
  echo "Create a new product for Ansible-Tower:"
  echo "*********************************************************"
  hammer product create --name='Ansible-Tower' --organization $ORG
  hammer repository create --name='Ansible-Tower' --organization $ORG --product='Ansible-Tower' --content-type yum --publish-via-http=true --url=http://releases.ansible.com/ansible-tower/rpm/epel-7-x86_64/ 
  #time hammer repository synchronize --organization $ORG --product 'Ansible-Tower'  --name  'Ansible-Tower' 2>/dev/null
  
  echo " "
  echo "*********************************************************"
  echo "Create a new product for Puppet modules in Puppet Forge:"
  echo "*********************************************************"
  hammer product create --name='Puppet Forge' --organization $ORG
  hammer repository create --name='Puppet Forge' --organization $ORG --product='Puppet Forge' --content-type puppet --publish-via-http=true --url=https://forge.puppetlabs.com 
  #time hammer repository synchronize --organization $ORG --product 'Puppet Forge'  --name  'Puppet Forge' 2>/dev/null
  
  #echo " "
  #echo "*********************************************************"
  #echo "Sync all repositories:"
  #echo "*********************************************************"
  
  for i in $(hammer --csv repository list --organization $ORG | awk -F, {'print $1'} | grep -vi '^ID'); do hammer repository synchronize --id ${i} --organization $ORG --async; done
}

#-------------------------------
function CREATESUBNET {
#------------------------------
  source /root/.bashrc
  echo -ne "\e[8;40;170t"
  echo " "
  hammer subnet create --domain-ids=1 --gateway=$SUBGATEWAY --mask=$INTERNALSUBMASK --name=$SUBNAME --tftp-id=1 --network=$SUBNETWORK --dns-primary=$SUBDNS --dhcp-id 1 --dns-id 1 --organizations $ORG --locations $LOC
}

#-------------------------------
function ENVIRONMENTS {
#-------------------------------
  source /root/.bashrc
  echo -ne "\e[8;40;170t"
  echo " "
  echo "*********************************************************"
  echo "Create 3 environments DEV_RHEL->TEST_RHEL->PROD_RHEL:"
  echo "*********************************************************"
  echo "DEVLOPMENT"
  hammer lifecycle-environment create --name='DEV_RHEL' --prior='Library' --organization $ORG
  sleep 5
  echo "TEST"
  hammer lifecycle-environment create --name='TEST_RHEL' --prior='DEV_RHEL' --organization $ORG
  sleep 5
  echo "PRODUCTION"
  hammer lifecycle-environment create --name='PROD_RHEL' --prior='TEST_RHEL' --organization $ORG
  sleep 5
  
  echo " "
  hammer lifecycle-environment list --organization $ORG
}

#-------------------------------
function DAILYSYNC {
#-------------------------------
  source /root/.bashrc
  echo -ne "\e[8;40;170t"
  echo " "
  echo "*********************************************************"
  echo "Create a daily sync plan:"
  echo "*********************************************************"
  hammer sync-plan create --name 'Daily Sync' --description 'Daily Synchronization Plan' --organization $ORG --interval daily --sync-date $(date +"%Y-%m-%d")" 00:00:00" --enabled yes
  sleep 10
  hammer sync-plan list --organization $ORG
}

#-------------------------------
function DAILYSYNCCOMPONENTS {
#-------------------------------
  source /root/.bashrc
  echo -ne "\e[8;40;170t"
  echo " "
  echo "Daily Sync Plan - Red Hat Enterprise Linux Server"
  hammer product set-sync-plan --name 'Red Hat Enterprise Linux Server' --organization $ORG --sync-plan 'Daily Sync'
  sleep 10
  #echo "Daily Sync Plan - Extra Packages for Enterprise Linux 6"
  #hammer product set-sync-plan --name 'Extra Packages for Enterprise Linux 6' --organization $ORG --sync-plan 'Daily Sync'
  #sleep 10
  echo "Daily Sync Plan - Extra Packages for Enterprise Linux 7"
  hammer product set-sync-plan --name 'Extra Packages for Enterprise Linux 7' --organization $ORG --sync-plan 'Daily Sync'
  sleep 10
  echo "Daily Sync Plan - Puppet Forge"
  hammer product set-sync-plan --name 'Puppet Forge' --organization $ORG --sync-plan 'Daily Sync'
  #sleep 10
  #echo "Daily Sync Plan - Oracle Java for RHEL Server"
  #hammer product set-sync-plan --name 'Oracle Java for RHEL Server' --organization $ORG --sync-plan 'Daily Sync'
  #sleep 10
}

#-------------------------------
function ASSOCPLANTOPRODUCTS {
#-------------------------------
  source /root/.bashrc
  echo -ne "\e[8;40;170t"
  echo " "
  echo "*********************************************************"
  echo "Associate plan to products:"
  echo "*********************************************************"
  #hammer product set-sync-plan --sync-plan-id=1 --organization $ORG --name='Oracle Java for RHEL Server'
  hammer product set-sync-plan --sync-plan-id=1 --organization $ORG --name='Red Hat Enterprise Linux Server'
  hammer product set-sync-plan --sync-plan-id=1 --organization-id 1 --name='Puppet Forge'
  #hammer product set-sync-plan --sync-plan-id=1 --organization $ORG --name='Extra Packages for Enterprise Linux 6'
  hammer product set-sync-plan --sync-plan-id=1 --organization $ORG --name='Extra Packages for Enterprise Linux 7'
  sleep 10
}

#-------------------------------
function CONTENTVIEW {
#-------------------------------
  source /root/.bashrc
  echo -ne "\e[8;40;170t"
  echo " "
  echo "***********************************************"
  echo "Create a content view for RHEL server x86_64:"
  echo "***********************************************"
  hammer content-view create --name='rhel-server-x86_64' --organization $ORG
  sleep 20
  for i in $(hammer --csv repository list --organization $ORG | awk -F, {'print $1'} | grep -vi '^ID'); do hammer content-view add-repository --name rhel-server-x86_64 --organization $ORG --repository-id=${i}; done
  sleep 10
}

#-------------------------------
function PUPPETMOD {
#-------------------------------
  source /root/.bashrc
  echo -ne "\e[8;40;170t"
  echo " "
  echo "***********************************************"
  echo "add individual puppet modules:"
  echo "***********************************************"
  echo "stdlib"
  hammer content-view puppet-module add --organization $ORG --content-view 'rhel-server-x86_64' --author puppetlabs --name stdlib
  echo "ntp"
  hammer content-view puppet-module add --organization $ORG --content-view 'rhel-server-x86_64' --author puppetlabs --name ntp
  echo "motd"
  hammer content-view puppet-module add --organization $ORG --content-view 'rhel-server-x86_64' --author jeffmccune --name motd
  echo "rsyslog"
  hammer content-view puppet-module add --organization $ORG --content-view 'rhel-server-x86_64' --author saz --name rsyslog
  echo "foreman_scap_client"
  hammer content-view puppet-module add --organization $ORG --content-view 'rhel-server-x86_64' --author theforeman --name foreman_scap_client
  echo "archive"
  hammer content-view puppet-module add --organization $ORG --content-view 'rhel-server-x86_64' --author camptocamp --name archive
  echo "firewalld"
  hammer content-view puppet-module add --organization $ORG --content-view 'rhel-server-x86_64' --author crayfishx --name firewalld
  echo "docker"
  hammer content-view puppet-module add --organization $ORG --content-view 'rhel-server-x86_64' --author cristifalcas --name docker
  echo "etcd"
  hammer content-view puppet-module add --organization $ORG --content-view 'rhel-server-x86_64' --author cristifalcas --name etcd
  echo "kubernetes"
  hammer content-view puppet-module add --organization $ORG --content-view 'rhel-server-x86_64' --author cristifalcas --name kubernetes
  echo "monitor"
  hammer content-view puppet-module add --organization $ORG --content-view 'rhel-server-x86_64' --author example42 --name monitor
  echo "puppi"
  hammer content-view puppet-module add --organization $ORG --content-view 'rhel-server-x86_64' --author example42 --name puppi
  echo "buildhost"
  hammer content-view puppet-module add --organization $ORG --content-view 'rhel-server-x86_64' --author LunetIX --name buildhost
  echo "docker"
  hammer content-view puppet-module add --organization $ORG --content-view 'rhel-server-x86_64' --author LunetIX --name docker
  echo "dockerhost"
  hammer content-view puppet-module add --organization $ORG --content-view 'rhel-server-x86_64' --author LunetIX --name dockerhost
  echo "git"
  hammer content-view puppet-module add --organization $ORG --content-view 'rhel-server-x86_64' --author LunetIX --name git
  echo "oscp"
  hammer content-view puppet-module add --organization $ORG --content-view 'rhel-server-x86_64' --author LunetIX --name oscp
  echo "fail2ban"
  hammer content-view puppet-module add --organization $ORG --content-view 'rhel-server-x86_64' --author netmanagers --name fail2ban
  echo "concat"
  hammer content-view puppet-module add --organization $ORG --content-view 'rhel-server-x86_64' --author puppetlabs --name concat
  echo "java"
  hammer content-view puppet-module add --organization $ORG --content-view 'rhel-server-x86_64' --author puppetlabs --name java
  echo "postgresql"
  hammer content-view puppet-module add --organization $ORG --content-view 'rhel-server-x86_64' --author puppetlabs --name postgresql
  echo "jenkins"
  hammer content-view puppet-module add --organization $ORG --content-view 'rhel-server-x86_64' --author rtyler --name jenkins
  echo "ssh"
  hammer content-view puppet-module add --organization $ORG --content-view 'rhel-server-x86_64' --author saz --name ssh
  sleep 5
  echo " "
)

#-------------------------------
function PUBLISHCONTENT {
#-------------------------------
  source /root/.bashrc
  echo -ne "\e[8;40;170t"
  echo " "
  echo "********************************"
  echo "Publish content view to Library:"
  echo "********************************"
  echo " "
  echo "********************************************************************************************************************************"
  echo "
	There may be an error that the (content-view publish) task has failed however the process takes longer to complete than the command timeout.
        Please see https://$(hostname)/content_views/2/versions to watch the task complete.
  "
  echo "********************************************************************************************************************************"
  
  echo " "
  hammer content-view publish --name 'rhel-server-x86_64' --organization $ORG --async
  sleep 2000
  
  echo " "
  echo "*********************************************************"
  echo "Promote content views to DEV_RHEL,TEST_RHEL,PROD_RHEL:"
  echo "*********************************************************"
  hammer content-view version promote --organization $ORG --from-lifecycle-environment ='Library' --to-lifecycle-environment 'DEV_RHEL' --id 2 --async
  sleep 700
  hammer content-view version promote --organization $ORG --from-lifecycle-environment ='DEV_RHEL' --to-lifecycle-environment 'TEST_RHEL' --id 2 --async
  sleep 700
  hammer content-view version promote --organization $ORG --from-lifecycle-environment ='TEST_RHEL' --to-lifecycle-environment 'PROD_RHEL' --id 2 --async
  sleep 700
}

#-------------------------------
function HOSTCOLLECTION {
#-------------------------------
  source /root/.bashrc
  echo -ne "\e[8;40;170t"
  echo " "
  echo "***********************************"
  echo "Create a host collection for RHEL:"
  echo "***********************************"
  hammer host-collection create --name='RHEL 7.5 x86_64' --organization $ORG
  sleep 50
  hammer host-collection list --organization $ORG
}

#-------------------------------
function KEYSFORENV {
#-------------------------------
  source /root/.bashrc
  echo -ne "\e[8;40;170t"
  echo " "
  echo "*********************************************************"
  echo "Create an activation keys for environments:"
  echo "*********************************************************"
  hammer activation-key create --name 'rhel-server-x86_64'-DEV_RHEL --organization $ORG --content-view='rhel-server-x86_64' --lifecycle-environment 'DEV_RHEL'
  sleep 5
  hammer activation-key create --name 'rhel-server-x86_64'-TEST_RHEL --organization $ORG --content-view='rhel-server-x86_64' --lifecycle-environment 'TEST_RHEL'
  sleep 5
  hammer activation-key create --name 'rhel-server-x86_64'-PROD_RHEL --organization $ORG --content-view='rhel-server-x86_64' --lifecycle-environment 'PROD_RHEL'
  sleep 5
  hammer activation-key list --organization $ORG
}

#-------------------------------
function KEYSTOHOST {
#-------------------------------
  source /root/.bashrc
  echo -ne "\e[8;40;170t"
  echo " "
  echo "*********************************************************"
  echo "Associate each activation key to host collection:"
  echo "*********************************************************"
  hammer activation-key add-host-collection --name 'rhel-server-x86_64'-DEV_RHEL --host-collection='RHEL 7.5 x86_64' --organization $ORG
  sleep 5
  hammer activation-key add-host-collection --name 'rhel-server-x86_64'-TEST_RHEL --host-collection='RHEL 7.5 x86_64' --organization $ORG
  sleep 5
  hammer activation-key add-host-collection --name 'rhel-server-x86_64'-PROD_RHEL --host-collection='RHEL 7.5 x86_64' --organization $ORG
  sleep 5
}



#-------------------------------
function SUBTOKEYS {
#-------------------------------
  source /root/.bashrc
  echo -ne "\e[8;40;170t"
  echo " "
  echo "********************************************************************************************************************************"
  echo "
	There may be errors in the next step (Could not add subscription to activation key) Please ignore these as
  long as your primary keys for your enabled subscriptions have been added"
  
  echo " "
  echo "********************************************************************************************************************************"
  echo " "
  echo "*********************************************************"
  echo "Add all subscriptions available to keys:"
  echo "*********************************************************"
  for i in $(hammer --csv activation-key list --organization $ORG | awk -F "," {'print $1'} | grep -vi '^ID'); do for j in $(hammer --csv subscription list --organization $ORG | awk -F "," {'print $1'} | grep -vi '^ID'); do hammer activation-key add-subscription --id ${i} --subscription-id ${j}; done; done
}

#-------------------------------
#function DEFAULT {
#-------------------------------
#echo -ne "\e[8;40;170t"
source /root/.bashrc
#cat > /var/lib/tftpboot/pxelinux.cfg/default << EOF
#DEFAULT menu
#PROMPT 0
#MENU TITLE PXE Menu#timeOUT 200
#TOTALTIMEOUT 6000
#ONTIMEOUT local
#LABEL local
# MENU LABEL (local)
# MENU DEFAULT
# LOCALBOOT 0
#LABEL discovery
# MENU LABEL Satellite 6 Discovery
# KERNEL boot/fdi-image-rhel_7-vmlinuz
# APPEND initrd=boot/fdi-image-rhel_7-img rootflags=loop root=live:/fdi.iso rootfstype=auto ro rd.live.image acpi=force rd.luks=0 rd.md=0 rd.dm=0 rd.lvm=0 rd.bootif=0 rd.neednet=0 nomodeset proxy.url=https://SATELLITE_CAPSULE_URL:9090 proxy.type=proxy
# IPAPPEND 2
#EOF
#}

#-------------------------------
#function KICKSTART {
#-------------------------------
#echo -ne "\e[8;40;170t"
#cat > /root/Kickstart_'$CUSTOMER' << EOF
#<%#
#kind: ptable
#name: Kickstart '$CUSTOMER'
#oses:
#- RedHat 6
#- RedHat 7
#%>
#zerombr
#clearpart --all --initlabel
#part /boot --asprimary --size=1024
#part swap --size=1024
#part pv.01 --asprimary --size=12000 --grow
#volgroup '$CUSTOMER'host pv.01
#logvol / --vgname='$CUSTOMER'host --size=9000 --name=rootvol
#EOF

# hammer partition-table create --file=/root/Kickstart_'$CUSTOMER' --name='Kickstart '$CUSTOMER'' --os-family='Redhat' --organizations=$ORG --locations="$LOC"
# hammer os update --title 'RedHat 7.5' --partition-tables='Kickstart default','Kickstart '$CUSTOMER''
# hammer os update --title 'RedHat 6.8' --partition-tables='Kickstart default','Kickstart '$CUSTOMER''
#}

#----------------------------------
function VARSETUP2 {
#----------------------------------
  source /root/.bashrc
  echo -ne "\e[8;40;170t"
  ENVIROMENT=$(hammer --csv environment list |awk -F "," {'print $2'}|grep -v Name |grep -v production)
  LEL=$(hammer environment list --organization $ORG |awk -F "|" {'print $2'}|grep -v - |grep -v NAME)
  
  echo "CAID=1" >> /root/.bashrc
  echo "MEDID1=$(hammer --csv medium list | grep 'Red_Hat_Enterprise_Linux_7_Server_Kickstart_x86_64_7_4' | awk -F, {'print $1'})" >> /root/.bashrc
  echo "SUBNETID=$(hammer --csv subnet list |awk -F "," {'print $1'}| grep -v Id)" >> /root/.bashrc
  echo "OSID=$(hammer os list |grep "RedHat 7.5" |awk -F "|" {'print $1'})" >> /root/.bashrc
  echo "PROXYNAME=$(hammer --csv proxy list |awk -F "," {'print $2'}| grep -v Name)" >> /root/.bashrc
  echo "PROXYID=$(hammer --csv proxy list |awk -F "," {'print $1'} |grep -v Id)" >> /root/.bashrc
  echo "PARTID=$(hammer --csv partition-table list | grep "Kickstart default" | cut -d, -f1)" >> /root/.bashrc
  echo "PXEID=$(hammer --csv template list --per-page=1000 | grep "Kickstart default PXELinux" | cut -d, -f1)" >> /root/.bashrc
  echo "SATID=$(hammer --csv template list --per-page=1000 | grep "provision" | grep "Satellite Kickstart Default" | cut -d, -f1)" >> /root/.bashrc
  echo "ORGID=$(hammer --csv organization list|awk -F "," {'print $1'}|grep -v Id)" >> /root/.bashrc
  echo "LOCID=$(hammer --csv location list|awk -F "," {'print $1'} |grep -v Id)" >> /root/.bashrc
  echo "ARCH=$(uname -i)" >> /root/.bashrc
  echo "ARCHID=$(hammer --csv architecture list|grep x86_64 |awk -F "," {'print $1'})"  >> /root/.bashrc
  echo "DOMID=$(hammer --csv domain list |grep -v Id |grep -v Name |awk -F "," {'print $1'})"  >> /root/.bashrc
  echo "SUBNETID=$(hammer --csv subnet list |awk -F "," {'print $1'}| grep -v Id)" >> /root/.bashrc
  echo "CVID=$(hammer --csv content-view list --organization $ORG |grep rhel-server-x86_64 |awk -F "," {'print $1'})" >>  /root/.bashrc
}

#-----------------------------------
function PARTITION_OS_PXE_TEMPLATE {
#-----------------------------------
  source /root/.bashrc
  echo -ne "\e[8;40;170t"
  source /root/.bashrc
  for i in $OSIDforeman-proxy-dhcp-managed
  do
    hammer partition-table add-operatingsystem --id="${PARTID}" --operatingsystem-id="${i}"
    hammer template add-operatingsystem --id="${PXEID}" --operatingsystem-id="${i}"
    hammer os set-default-template --id="${i}" --config-template-id="${PXEID}"
    hammer os add-config-template --id="${i}" --config-template-id="${SATID}"
    hammer os set-default-template --id="${i}" --config-template-id="${SATID}"
  done
}

#-------------------------------
function HOSTGROUPS {
#-------------------------------
  source /root/.bashrc
  echo -ne "\e[8;40;170t"
  echo " "
  echo "*********************************************************"
  echo "Create a RHEL hostgroup(s):"
  echo "*********************************************************"
  #MAKES ROOTPASSWORD ON NODES rreeddhhaatt BECAUSE THE SYSTEM REQUIRES IT TO BE 8+ CHAR (--root-pass rreeddhhaatt)
  
  ENVIROMENT=$(hammer --csv environment list |awk -F "," {'print $2'}|grep -v Name |grep -v production)
  LEL=$(hammer --csv environment list --organization-id $ORGID |awk -F "," {'print $2'}|grep -v Name)

 for i in $LEL; do for j in $(hammer --csv environment list |awk -F "," {'print $2'}| awk -F "_" {'print $3'}); do hammer hostgroup create --name rhel-7-$j --environment $i --architecture-id $ARCHID --content-view-id $CVID --domain-id $DOMID --location-ids $LOCID --medium-id $MEDID1 --operatingsystem-id $OSID --organization-id=$ORGID  --partition-table-id $PARTID --puppet-ca-proxy-id $PROXYID --subnet-id $SUBNETID --root-pass=bj8H7ndC ; done; done
}

#-------------------------------
function MODPXELINUXDEF {
#-------------------------------
  source /root/.bashrc
  echo -ne "\e[8;40;170t"
  echo " "
  echo "*********************************************************"
  echo "Setting up and Modifying default template for auto discovery"
  echo "*********************************************************"
  sed -i 's/SATELLITE_CAPSULE_URL/'$(hostname)'/g' /usr/share/foreman/app/views/unattended/pxe/PXELinux_default.erb
  hammer template update --id 1
}


#-------------------------------
function ADD_OS_TOTEMPLATE {
#-------------------------------
  source /root/.bashrc
  echo -ne "\e[8;40;170t"
  echo " "
  echo "*********************************************************"
  echo "ASSOCIATEOSTEMPLATE"
  echo "*********************************************************"
  
  hammer template add-operatingsystem --operatingsystem-id 1 --id 1
}

#NOTE You can remove or dissasociate templates Remove is perm (Destricutve) dissasociate you can re associate if you need 

#-------------------------------
function REMOVEUNSUPPORTED {
#-------------------------------
  source /root/.bashrc
  echo -ne "\e[8;40;170t"
  echo " "
  echo "*********************************************************"
  echo "Removing Unsupported componants"
  echo "*********************************************************"
  for i in $(hammer template list |grep -i FreeBSD |awk -F "|" {'print $1'}) ; do hammer template delete --id $i ;done
  for i in $(hammer template list |grep -i CoreOS |awk -F "|" {'print $1'}) ; do hammer template delete --id $i ;done
  for i in $(hammer template list |grep -i salt |awk -F "|" {'print $1'}) ; do hammer template delete --id $i ;done
  for i in $(hammer template list |grep -i waik |awk -F "|" {'print $1'}) ; do hammer template delete --id $i ;done
  for i in $(hammer template list |grep -i NX-OS |awk -F "|" {'print $1'}) ; do hammer template delete --id $i ;done
  for i in $(hammer template list |grep -i Alterator |awk -F "|" {'print $1'}) ; do hammer template delete --id $i ;done
  for i in $(hammer template list |grep -i Junos |awk -F "|" {'print $1'}) ; do hammer template delete --id $i ;done
  for i in $(hammer template list |grep -i Jumpstart |awk -F "|" {'print $1'}) ; do hammer template delete --id $i ;done
  for i in $(hammer template list |grep -i Preseed |awk -F "|" {'print $1'}) ; do hammer template delete --id $i ;done
  for i in $(hammer template list |grep -i chef |awk -F "|" {'print $1'}) ; do hammer template delete --id $i ;done
  for i in $(hammer template list |grep -i AutoYaST |awk -F "|" {'print $1'}) ; do hammer template delete --id $i ;done
  
  for i in $(hammer partition-table list |grep -i AutoYaST |awk -F "|" {'print $1'}) ; do hammer partition-table delete --id $i ;done
  for i in $(hammer partition-table list |grep -i CoreOS |awk -F "|" {'print $1'}) ; do hammer partition-table delete --id $i ;done
  for i in $(hammer partition-table list |grep -i FreeBSD |awk -F "|" {'print $1'}) ; do hammer partition-table delete --id $i ;done
  for i in $(hammer partition-table list |grep -i Jumpstart |awk -F "|" {'print $1'}) ; do hammer partition-table delete --id $i ;done
  for i in $(hammer partition-table list |grep -i Junos |awk -F "|" {'print $1'}) ; do hammer partition-table delete --id $i ;done
  for i in $(hammer partition-table list |grep -i NX-OS |awk -F "|" {'print $1'}) ; do hammer partition-table delete --id $i ;done
  for i in $(hammer partition-table list |grep -i Preseed |awk -F "|" {'print $1'}) ; do hammer partition-table delete --id $i ;done
  
  for i in $(hammer medium list |grep -i CentOS |awk -F "|" {'print $1'}) ; do hammer medium delete --id $i ;done
  for i in $(hammer medium list |grep -i CoreOS |awk -F "|" {'print $1'}) ; do hammer medium delete --id $i ;done
  for i in $(hammer medium list |grep -i Debian |awk -F "|" {'print $1'}) ; do hammer medium delete --id $i ;done
  for i in $(hammer medium list |grep -i Fedora |awk -F "|" {'print $1'}) ; do hammer medium delete --id $i ;done
  for i in $(hammer medium list |grep -i FreeBSD |awk -F "|" {'print $1'}) ; do hammer medium delete --id $i ;done
  for i in $(hammer medium list |grep -i OpenSUSE |awk -F "|" {'print $1'}) ; do hammer medium delete --id $i ;done
  for i in $(hammer medium list |grep -i Ubuntu |awk -F "|" {'print $1'}) ; do hammer medium delete --id $i ;done
}


#-------------------------------
function disassociate_templates {
#------------------------------
  source /root/.bashrc
  echo -ne "\e[8;40;170t"
  echo " "
  declare -a TEMPLATES=(
    "Alterator default"
    "Alterator default finish"
    "Alterator default PXELinux"
    "alterator_pkglist"
    "AutoYaST default"
    "AutoYaST default user data"
    "AutoYaST default iPXE"
    "AutoYaST default PXELinux"
    "AutoYaST SLES default"
    "chef_client"
    "coreos_cloudconfig"
    "CoreOS provision"
    "CoreOS PXELinux"
    "Discovery Debian kexec"
    "FreeBSD (mfsBSD) finish"
    "FreeBSD (mfsBSD) provision"
    "FreeBSD (mfsBSD) PXELinux"
    "Jumpstart default"
    "Jumpstart default finish"
    "Jumpstart default PXEGrub"
    "Junos default finish"
    "Junos default SLAX"
    "Junos default ZTP config"
    "NX-OS default POAP setup"
    "Preseed default"
    "Preseed default finish"
    "Preseed default PXEGrub2"
    "Preseed default iPXE"
    "Preseed default PXELinux"
    "Preseed default user data"
    "preseed_networking_setup"
    "saltstack_minion"
    "WAIK default PXELinux"
    "XenServer default answerfile"
    "XenServer default finish"
    "XenServer default PXELinux"
  )
  for INDEX in "${TEMPLATES[@]}"
  do
    echo disassoction of ${INDEX} from ${ORG}@${LOCATION}
    hammer organization remove-config-template --config-template "${INDEX}" --name "${ORG}"
    hammer location remove-config-template --config-template "${INDEX}" --name "${LOCATION}"
  done
}
# MAIN
# Enable this function after Upgrade or Re-execution of satellite-installer.
disassociate_templates
}

#-------------------------------
function SATUPDATE {
#-------------------------------
  echo " "
  echo "*********************************************************"
  echo "Updating Satellite"
  echo "*********************************************************"
  echo " "
  subscription-manager repos --disable '*'
  subscription-manager repos --enable=rhel-7-server-rpms
  subscription-manager repos --enable=rhel-server-rhscl-7-rpms
  subscription-manager repos --enable=rhel-7-server-satellite-6.3-rpms
  katello-service stop
  katello-selinux-disable
  setenforce 0
  yum upgrade -y --skip-broken
  satellite-installer --scenario satellite --upgrade
  hammer template build-pxe-default

}

#-------------------------------
function INSIGHTS {
#-------------------------------
  yum update python-requests -y
  yum install redhat-access-insights -y
  redhat-access-insights --register
}

